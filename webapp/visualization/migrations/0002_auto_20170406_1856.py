# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-07 00:56
from __future__ import unicode_literals

import csv
from dateutil.parser import parse
import os

from django.db import migrations

from webapp.settings import BASE_DIR

def addAccounts(apps, schema_editor):
    Account = apps.get_model("visualization", "Account")
    account_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Accounts.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( account_list ) == chunk_size:
            Account.objects.bulk_create( account_list )
            del account_list
            account_list = []
            print "10000 Done"

        account_obj = Account( 
            account_id = row['Account ID'].strip(),
            industry = row['Industry'].strip(),
            vertical = row['Vertical'].strip(),
            total_brr = float( row['Total BRR'].strip().replace('$', '').replace(',', '') ) if row['Total BRR'].strip().replace('$', '').replace(',', '') != '-' else None,
            annual_revenue = float( row['AnnualRevenue'].strip().replace('$', '').replace(',', '') ) if row['AnnualRevenue'].strip().replace('$', '').replace(',', '') != '-' else None,
            number_of_employees = int( row['NumberOfEmployees'].strip().replace('$', '').replace(',', '') ) if row['NumberOfEmployees'].strip().replace('$', '').replace(',', '') != '-' else None,
            dandb_revenue = float( row['DandB Revenue'].strip().replace('$', '').replace(',', '') ) if row['DandB Revenue'].strip().replace('$', '').replace(',', '') != '-' else None,
            dandb_total_employees = int( row['DandB Total Employees'].strip().replace('$', '').replace(',', '') ) if row['DandB Total Employees'].strip().replace('$', '').replace(',', '') != '-' else None,
         )
        account_list.append(account_obj)
    Account.objects.bulk_create( account_list )

def addBuildings(apps, schema_editor):
    Building = apps.get_model("visualization", "Building")
    building_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Buildings.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( building_list ) == chunk_size:
            Building.objects.bulk_create( building_list )
            del building_list
            building_list = []
            print "10000 Done"

        building_obj = Building( 
            building_id = row['Building ID'].strip(),
            market = row['Market'].strip(),
            street_address = row['Street Address'].strip(),
            city = row['City'].strip(),
            state = row['State'].strip(),
            postal_code = row['Postal Code'].strip(),
            latitude = row['Latitude'].strip(),
            longitude = row['Longitude'].strip(),
            zayo_network_status = row['On Zayo Network Status'].strip(),
            net_classification = row['Net Classification'].strip(),
            building_type = row['Type'].strip(),
            network_proximity = float( row['Network Proximity'].strip() ) if row['Network Proximity'].strip() != '' else None,
            estimated_build_cost = float( row['Estimated Build Cost'].strip().replace('$', '').replace(',', '') ) if row['Estimated Build Cost'].strip().replace('$', '').replace(',', '') != '-' else None,
         )
        building_list.append(building_obj)
    Building.objects.bulk_create( building_list )

def addSites(apps, schema_editor):
    Site = apps.get_model("visualization", "Site")
    site_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Sites.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( site_list ) == chunk_size:
            Site.objects.bulk_create( site_list )
            del site_list
            site_list = []
            print "10000 Done"

        site_obj = Site( 
            site_id = row['Site ID'].strip(),
            account_id = row['Account ID'].strip(),
            building_id = row['Building ID'].strip(),
         )
        site_list.append(site_obj)
    Site.objects.bulk_create( site_list )

def addCpqs(apps, schema_editor):
    Cpq = apps.get_model("visualization", "Cpq")
    cpq_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_CPQs.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( cpq_list ) == chunk_size:
            Cpq.objects.bulk_create( cpq_list )
            del cpq_list
            cpq_list = []
            print "10000 Done"

        cpq_obj = Cpq( 
            cpq_id = row['CPQ ID'].strip(),
            account_id = row['Account ID'].strip() if row['Account ID'].strip() != '' else None,
            created_date = parse(row['CreatedDate'].strip()),
            product_group = row['Product Group'].strip(),
            x36_mrc_list =float( row['X36 MRC List'].strip().replace('$', '').replace(',', '') ) if row['X36 MRC List'].strip().replace('$', '').replace(',', '') != '-' else None,
            x36_nrr_list =float( row['X36 NRR List'].strip().replace('$', '').replace(',', '') ) if row['X36 NRR List'].strip().replace('$', '').replace(',', '') != '-' else None,
            x36_npv_list =float( row['X36 NPV List'].strip().replace('$', '').replace(',', '') ) if row['X36 NPV List'].strip().replace('$', '').replace(',', '') != '-' else None,
            building_id = row['Building ID'].strip(),
         )
        cpq_list.append(cpq_obj)
    Cpq.objects.bulk_create( cpq_list )

def addMarkets(apps, schema_editor):
    Market = apps.get_model("visualization", "Market")
    market_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Markets.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( market_list ) == chunk_size:
            Market.objects.bulk_create( market_list )
            del market_list
            market_list = []
            print "10000 Done"

        market_obj = Market( 
            market = row['Market'].strip(),
            base_cost = float(row['Base Cost'].strip()),
            distance_less_500_ft = float(row['Distance < 500ft'].strip()),
            distance_greater_500_ft = float(row['Distance > 500ft'].strip()),
         )
        market_list.append(market_obj)
    Market.objects.bulk_create( market_list )

def addOpportunities(apps, schema_editor):
    Opportunity = apps.get_model("visualization", "Opportunity")
    opportunity_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Opportunities.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( opportunity_list ) == chunk_size:
            Opportunity.objects.bulk_create( opportunity_list )
            del opportunity_list
            opportunity_list = []
            print "10000 Done"

        opportunity_obj = Opportunity( 
            opportunity_id = row['Opportunity ID'].strip(),
            account_id = row['Account ID'].strip() if row['Account ID'].strip() != '' else None,
            stage_name = row['StageName'].strip(),
            is_closed = True if row['IsClosed'].strip() == 'true' else False,
            is_won = True if row['IsWon'].strip() == 'true' else False,
            created_date = parse(row['CreatedDate'].strip()),
            term_in_months = int( row['Term in Months'].strip()) if row['Term in Months'].strip() != '' else None, 
            service = row['Service'].strip(),
            opportunity_type = row['Opportunity Type'].strip(),
            product_group = row['Product Group'].strip(),
            building_id = row['Building ID'].strip() if row['Building ID'].strip() != '' else None,
         )
        opportunity_list.append(opportunity_obj)
    Opportunity.objects.bulk_create( opportunity_list )

def addServices(apps, schema_editor):
    Service = apps.get_model("visualization", "Service")
    service_list = []
    chunk_size = 10000

    csvFilePath = os.path.join(BASE_DIR, 'data/ZayoHackathonData_Services.csv')
    csvFile = open( csvFilePath )
    header = [h.strip() for h in csvFile.next().split(',')]
    reader = csv.DictReader(csvFile, fieldnames=header)
    for row in reader:
        # Bulk Create Data in chunk Sizes
        if len( service_list ) == chunk_size:
            Service.objects.bulk_create( service_list )
            del service_list
            service_list = []
            print "10000 Done"

        service_obj = Service( 
            service_id = row['Service ID'].strip(),
            account_id = row['Account ID'].strip() if row['Account ID'].strip() != '' else None,
            total_mrr = float( row['Total MRR'].strip().replace('$', '').replace(',', '').replace('(', '').replace(')','') ) if row['Total MRR'].strip().replace('$', '').replace(',', '').replace('(', '').replace(')','') != '-' else None,
            netx_mrc = float( row['Netx MRC'].strip().replace('$', '').replace(',', '') ) if row['Netx MRC'].strip().replace('$', '').replace(',', '') != '-' else None,
            product_group = row['Product Group'].strip(),
            status = row['Status'].strip(),
            building_id = row['Building ID'].strip(),
            street_address = row['Street Address'].strip(),
            city = row['City'].strip(),
            state = row['State'].strip(),
            postal_code = row['Postal Code'].strip(),
            country = row['Country'].strip(),
         )
        service_list.append(service_obj)
    Service.objects.bulk_create( service_list )

class Migration(migrations.Migration):

    dependencies = [
        ('visualization', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(addAccounts),
        migrations.RunPython(addBuildings),
        migrations.RunPython(addSites),
        migrations.RunPython(addCpqs),
        migrations.RunPython(addMarkets),
        migrations.RunPython(addOpportunities),
        migrations.RunPython(addServices),
    ]
